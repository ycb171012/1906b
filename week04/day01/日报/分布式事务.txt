## 什么是事务？

当你需要一次执行多条SQL语句时，可以使用事务。即：如果这几条SQL语句全部执行成功，则才对数据库进行一次更新，如果有一条SQL语句执行失败，则这几条SQL语句全部不进行执行，这个时候需要用到事务。

数据库事务的四大特性ACID：

原子性（Atomicity）
       要么都执行，要么都不执行

一致性（Consistency）
       事务前后的数据都是正确的

隔离性（Isolation）
      事物之间相互隔离，互不干扰（并发执行的事务彼此无法看到对方的中间状态）

持久性（Durability）
       事务一旦提交不可再回滚 

## 本地事务：

在计算机系统中，更多的是通过关系型数据库来控制事务，这是利用数据库本身的事务特性来实现的，因此叫数据库事务，由于应用主要靠关系数据库来控制事务，而数据库通常和应用在同一个服务器，所以基于关系型数据库的事务又被称为本地事务。

### 数据库本身控制事物：

begin transaction；
      //1.本地数据库操作：张三减少金额
      //2.本地数据库操作：李四增加金额
rollback;
或
commit transation;

### jdbc中使用事物：

 **1.获取对数据库的连接**

 **2.设置事务不自动提交（默认情况是自动提交的）** 

conn.setAutoCommit(false);   //其中conn是第一步获取的随数据库的连接对象。

 **3.把想要一次性提交的几个sql语句用事务进行提交**

try{
    Statement stmt = null; 
    stmt =conn.createStatement(); 
    stmt.executeUpdate(sql1); 
    int a=6/0;
    stmt.executeUpdate(Sql2); 
    . 
    conn.commit();   //使用commit提交事务 
}

**4.捕获异常，进行数据的回滚（回滚一般写在catch块中）** 

catch（Exception e） { 
   ... 
   conn.rollback(); 
}

## aop控制事务：

**配置事务管理器**

<!--增强：配置事务管理器  -->
<bean id="tm"class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
</bean>

配置事务的通知

`<!--配置事务的通知（增强）  -->`
`<tx:advice id="txAdvice" transaction-manager="tm">`
    <!--配置事务的传播行为  -->
    <tx:attributes>
        <tx:method name="add*" propagation="REQUIRED"/>
        <tx:method name="del*" propagation="REQUIRED"/>
        <tx:method name="update*" propagation="REQUIRED"/>
        <tx:method name="get*" read-only="true"/>
        <tx:method name="*" read-only="true"/>
    </tx:attributes>
`</tx:advice>`



配置切面

<!--配置切面：把增强应用到切点上  -->
<aop:config>
   <!--切点 --> 
   <aop:pointcut expression="execution(* com.usian.service.*.*(..))" id="pointcut"/>
   <!--切面 -->
   <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
</aop:config>



## 分布式事务

![59275102679](C:\Users\ADMINI~1.201\AppData\Local\Temp\1592751026798.png)

分布式系统会把一个应用系统拆分为可独立部署的多个服务，因此需要服务与服务之间远程协作才能完成事务操作，这种分布式系统环境下由不同的服务之间通过网络远程协作完成事务称之为**分布式事务**，例如用户注册送积分事务、创建订单减库存事务，银行转账事务等都是分布式事务。



### 分布式事物产生的场景

1、典型的场景就是微服务架构 微服务之间通过远程调用完成事务操作。 比如：订单微服务和库存微服务，下单的同时订单微服务请求库存微服务减库存。简言之：跨JVM进程产生分布式事务。

2、单体系统访问多个数据库实例 当单体系统需要访问多个数据库（实例）时就会产生分布式事务。 比如：用户信息和订单信息分别在两个MySQL实例存储，用户管理系统删除用户信息，需要分别删除用户信息及用户的订单信息，由于数据分布在不同的数据实例，需要通过不同的数据库链接去操作数据，此时产生分布式事务。 简言之：跨数据库实例产生分布式事务。

3、多服务访问同一个数据库实例 比如：订单微服务和库存微服务即使访问同一个数据库也会产生分布式事务，两个微服务持有了不同的数据库链接进行数据库操作，此时产生分布式事务。简言之：跨JVM进程产生分布式事务。

## RabbitMQ可靠消息最终一致性介绍

可靠消息最终一致性方案是指当事务发起方执行完成本地事务后并发出一条消息，事务参与方(消息消费者)一定能够接收消息并处理事务成功，此方案强调的是只要消息发给事务参与方最终事务要达到一致。

此方案是利用消息中间件完成，如下图：

![59275114101](C:\Users\ADMINI~1.201\AppData\Local\Temp\1592751141014.png)

事务发起方（消息生产方）将消息发给消息中间件，事务参与方从消息中间件接收消息，事务发起方和消息中间件之间，事务参与方（消息消费方）和消息中间件之间都是通过网络通信，由于网络通信的不确定性会导致分布式事务问题。

### 可靠消息最终一致性要解决的问题：

### 1.上游服务把信息成功发送

**本地事务与消息发送的原子性问题**：事务发起方在本地事务执行成功后消息必须发出去，否则就回滚事务。即实现本地事务和消息发送的原子性，要么都成功，要么都失败。

### 2.下游服务成把消息成功消费

**事务参与方接收消息的可靠性**：事务参与方必须能够从消息队列接收到消息。

### 3.对消息做幂

**消息重复消费的问题**：由于网络2的存在，若某一个消费节点响应超时但是消费成功，此时消息中间件会重复投递此消息，就导致了消息的重复消费。

### 解决方案：

#### 1.问题一：上游服务把消息成功发送

![59275122866](C:\Users\ADMINI~1.201\AppData\Local\Temp\1592751228663.png)

#### 2.问题二：下游服务成把消息成功消费：

**消息重试：**消息持久化后，如果消息在投递过程中丢失，或消息的确认应答在返回途中丢失，那么消息中间件就会重新投递，直到下游消费者返回消费成功响应为止。

**任务失败：**当任务处理失败后，则返回给消息中间件失败，消息会重复发送

![59275128329](C:\Users\ADMINI~1.201\AppData\Local\Temp\1592751283291.png)

#### 3.问题三：对消息做幂等

任务B处理消息前，先查询该消息是否被消费，如果没消费，处理任务B成功，记录消息。如果消息已经被消费，直接返回应答成功

![59275131863](C:\Users\ADMINI~1.201\AppData\Local\Temp\1592751318634.png)

## RabbitMQ实现可靠消息最终一致性

## 需求说明：

**usian_order_service：**

​       1、保存订单信息

​       2、保存本地消息记录

​       3、向MQ Server发送转账消息

​       4、在MQ Server响应返回后更新本地消息为已成功发送状态

**usian_item_service：**

​       1、接收消息，扣减库存

​       2、向MQ Server发送应答状态

​       3、对扣减库存方法做幂等

### 创建数据库：

在数据库中新增local_message，本地消息记录表(初始化状态为发送失败)，用于保证上游服务把消息成功发送。

CREATE TABLE `local_message` (
  `tx_no` varchar(255) NOT NULL,
  `order_no` varchar(255) DEFAULT NULL,
  `state` int(11) DEFAULT NULL,
  PRIMARY KEY (`tx_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

在数据库中新增de_duplication，去重表，用于交易幂等控制。

DROP TABLE IF EXISTS `de_duplication`;
CREATE TABLE `de_duplication` (
  `tx_no` varchar(255) NOT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`tx_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

## common_pojo

逆向工程

## common_mapper

逆向工程

### usian_order_service

#### application.yml：

spring:
  rabbitmq:
    publisher-confirms: true #开启消息确认机制
    publisher-returns: true #开启发送失败退回

